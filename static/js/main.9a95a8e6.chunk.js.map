{"version":3,"sources":["App.module.scss","components/AddTaskForm.module.scss","components/TaskIcon.tsx","components/AddTaskForm.tsx","components/Task.tsx","App.tsx","serviceWorker.ts","index.tsx","components/Task.module.scss"],"names":["module","exports","IconEnum","TaskIcon","iconEnum","props","ArmFlex","icon","armFlex","Block","blockIcon","Camera","camera","Carrot","carrot","Check","checkIcon","Meditation","meditation","Pill","pill","Pen","quillPenFill","icons","Object","values","AddTaskForm","onSave","onClose","useState","selectedIconIndex","setSelectedIconIndex","title","setTitle","canSubmit","setCanSubmit","textLength","setTextLength","history","useHistory","className","styles","container","onClick","timesIcon","style","height","form","onSubmit","e","preventDefault","push","marginTop","htmlFor","id","name","type","placeholder","value","onChange","inputValLength","target","length","map","index","key","disabled","Task","count","isComplete","undefined","data","App","tasks","setNewTasks","heading","path","routeProps","Date","toDateString","task","prevTasks","produce","newTasks","handleTaskClick","plusIcon","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9a95a8e6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"heading\":\"App_heading__2UL9e\",\"tasks-container\":\"App_tasks-container__Z2Psq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"AddTaskForm_container__94co6\",\"button-container\":\"AddTaskForm_button-container__31uu2\",\"form\":\"AddTaskForm_form__1zT9Q\",\"sub-text\":\"AddTaskForm_sub-text__233rb\",\"title-container\":\"AddTaskForm_title-container__2WUf8\",\"selected-icon-container\":\"AddTaskForm_selected-icon-container__1rJR4\",\"selected-icon\":\"AddTaskForm_selected-icon__3e4LX\",\"icon-selection-container\":\"AddTaskForm_icon-selection-container__1j2Jt\",\"icon\":\"AddTaskForm_icon__3CV-z\",\"selected\":\"AddTaskForm_selected__2sOnJ\"};","import camera from \"@iconify/icons-bx/bxs-camera\";\nimport checkIcon from \"@iconify/icons-fa-solid/check\";\nimport blockIcon from \"@iconify/icons-gg/block\";\nimport armFlex from \"@iconify/icons-mdi/arm-flex\";\nimport carrot from \"@iconify/icons-mdi/carrot\";\nimport meditation from \"@iconify/icons-mdi/meditation\";\nimport pill from \"@iconify/icons-mdi/pill\";\nimport quillPenFill from \"@iconify/icons-ri/quill-pen-fill\";\nimport { Icon, IconifyIcon } from \"@iconify/react\";\nimport React, { FunctionComponent } from \"react\";\n\nexport enum IconEnum {\n  Check = \"check\",\n  ArmFlex = \"arm-flex\",\n  Block = \"block\",\n  Meditation = \"meditation\",\n  Pill = \"pill\",\n  Carrot = \"carrot\",\n  Pen = \"pen\",\n  Camera = \"camera\",\n}\n\ninterface Props extends Partial<IconifyIcon> {\n  iconEnum: IconEnum;\n}\n\nexport const TaskIcon: FunctionComponent<Props> = ({ iconEnum, ...props }) => {\n  switch (iconEnum) {\n    case IconEnum.ArmFlex:\n      return <Icon {...props} icon={armFlex} />;\n    case IconEnum.Block:\n      return <Icon {...props} icon={blockIcon} />;\n    case IconEnum.Camera:\n      return <Icon {...props} icon={camera} />;\n    case IconEnum.Carrot:\n      return <Icon {...props} icon={carrot} />;\n    case IconEnum.Check:\n      return <Icon {...props} icon={checkIcon} />;\n    case IconEnum.Meditation:\n      return <Icon {...props} icon={meditation} />;\n    case IconEnum.Pill:\n      return <Icon {...props} icon={pill} />;\n    case IconEnum.Pen:\n      return <Icon {...props} icon={quillPenFill} />;\n    default:\n      return <></>;\n  }\n};\n","import timesIcon from \"@iconify/icons-fa-solid/times\";\nimport { Icon } from \"@iconify/react\";\nimport React, { ChangeEvent, FunctionComponent, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport styles from \"./AddTaskForm.module.scss\";\nimport { IconEnum, TaskIcon } from \"./TaskIcon\";\ninterface Props {\n  onSave: (iconEnum: IconEnum, title: string) => void;\n  onClose: () => void;\n}\n\nconst icons = Object.values(IconEnum);\n\nexport const AddTaskForm: FunctionComponent<Props> = ({ onSave, onClose }) => {\n  const [selectedIconIndex, setSelectedIconIndex] = useState(0);\n  const [title, setTitle] = useState(\"\");\n  const [canSubmit, setCanSubmit] = useState(false);\n  const [textLength, setTextLength] = useState(0);\n  const history = useHistory();\n\n  const submitForm = (e: React.FormEvent) => {\n    e.preventDefault();\n    onSave(icons[selectedIconIndex], title);\n    history.push(\"/\");\n  };\n\n  const handleSelectIcon = (icnIdx: number) => {\n    setSelectedIconIndex(icnIdx);\n  };\n  return (\n    <div className={styles.container}>\n      <header>\n        <div className={styles[\"button-container\"]}>\n          <div onClick={() => onClose()}>\n            <Icon icon={timesIcon} />\n          </div>\n        </div>\n        <h2>Add Task</h2>\n      </header>\n      <div className={styles[\"selected-icon-container\"]}>\n        <TaskIcon\n          className={styles[\"selected-icon\"]}\n          iconEnum={icons[selectedIconIndex]}\n        />\n      </div>\n      <div style={{ height: 40 }}>\n        <div className={styles[\"title-container\"]}>{title}</div>\n      </div>\n\n      <form className={styles.form} onSubmit={submitForm}>\n        <div className={styles[\"sub-text\"]}>\n          <p>\n            Tasks start each day as incomplete. Mark a task as done to increase\n            your streak.\n          </p>\n          <div style={{ marginTop: \"2rem\" }}>\n            <label htmlFor=\"task-name\">Title:</label>\n          </div>\n        </div>\n        <input\n          id=\"task-name\"\n          name=\"task-name\"\n          type=\"text\"\n          placeholder=\"Enter task title...\"\n          value={title}\n          onChange={(e: ChangeEvent<HTMLInputElement>) => {\n            const inputValLength = e.target.value.length;\n            if (inputValLength <= 28) {\n              setTitle(e.target.value);\n              setTextLength(inputValLength);\n            }\n            if (inputValLength > 0) {\n              setCanSubmit(true);\n            } else {\n              setCanSubmit(false);\n            }\n          }}\n        />\n        <div className={styles[\"sub-text\"]}>{textLength}/28</div>\n        <div style={{ marginTop: \"2rem\" }}>\n          <div className={styles[\"sub-text\"]}>\n            <label>Icon:</label>\n            <div className={styles[\"icon-selection-container\"]}>\n              {icons.map((icon, index) => {\n                return (\n                  <div key={index} onClick={() => handleSelectIcon(index)}>\n                    <TaskIcon\n                      iconEnum={icon}\n                      className={`${styles[\"icon\"]} ${\n                        index === selectedIconIndex ? styles[\"selected\"] : \"\"\n                      }`}\n                    />\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n        </div>\n        <button disabled={!canSubmit} type=\"submit\">\n          Save Task\n        </button>\n      </form>\n    </div>\n  );\n};\n","import Icon from \"@iconify/react\";\nimport React, { FunctionComponent } from \"react\";\nimport styles from \"./Task.module.scss\";\nimport { IconEnum, TaskIcon } from \"./TaskIcon\";\n\ninterface Props {\n  name: string;\n  count: number | null;\n  iconEnum?: IconEnum;\n  icon?: object;\n  isComplete: boolean;\n  onClick: (event: React.MouseEvent<HTMLElement>) => void;\n}\n\nexport const Task: FunctionComponent<Props> = ({\n  iconEnum,\n  icon,\n  name,\n  count,\n  isComplete,\n  onClick,\n}) => {\n  return (\n    <div className={styles[\"container\"]}>\n      <div\n        className={`${styles[\"progress-container\"]} ${\n          isComplete ? styles[\"task-complete\"] : \"\"\n        }`}\n        onClick={onClick}\n      >\n        <div>\n          {icon !== undefined ? (\n            <Icon icon={icon} className={styles[\"icon\"]} />\n          ) : null}\n\n          {iconEnum !== undefined ? (\n            <TaskIcon className={styles[\"icon\"]} iconEnum={iconEnum} />\n          ) : null}\n        </div>\n        <div className={styles[\"count\"]}>{count}</div>\n      </div>\n      <div className={styles[\"task-name\"]}>{name}</div>\n    </div>\n  );\n};\n","import plusIcon from \"@iconify/icons-fa-solid/plus\";\nimport produce from \"immer\";\nimport React, { useState } from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport styles from \"./App.module.scss\";\nimport { AddTaskForm } from \"./components/AddTaskForm\";\nimport { Task } from \"./components/Task\";\nimport { IconEnum } from \"./components/TaskIcon\";\n\ntype Task = {\n  id: string;\n  name: string;\n  iconEnum: IconEnum;\n  count: number;\n  isComplete: boolean;\n};\n\nconst data: Array<Task> = [\n  {\n    id: \"1\",\n    name: \"meditate\",\n    iconEnum: IconEnum.Meditation,\n    count: 0,\n    isComplete: false,\n  },\n];\n\nfunction App() {\n  const [tasks, setNewTasks] = useState<Array<Task>>(data);\n\n  const handleTaskClick = (task: Task, index: number) => {\n    if (!task.isComplete) {\n      setNewTasks((prevTasks) => {\n        return produce(prevTasks, (newTasks) => {\n          newTasks[index] = {\n            ...newTasks[index],\n            isComplete: true,\n            count: newTasks[index].count += 1,\n          };\n          return newTasks;\n        });\n      });\n    } else {\n      setNewTasks((prevTasks) => {\n        return produce(prevTasks, (newTasks) => {\n          newTasks[index] = {\n            ...newTasks[index],\n            isComplete: false,\n            count: newTasks[index].count -= 1,\n          };\n          return newTasks;\n        });\n      });\n    }\n  };\n\n  return (\n    <>\n      <div className={styles.heading}>\n        <h1>STREAKS</h1>\n      </div>\n      <main>\n        <Router>\n          <Switch>\n            <Route path={`/add-task`}>\n              {(routeProps) => (\n                <AddTaskForm\n                  onClose={() => {\n                    routeProps.history.push(\"/\");\n                  }}\n                  onSave={(iconEnum, title) => {\n                    setNewTasks([\n                      ...tasks,\n                      {\n                        name: title,\n                        iconEnum,\n                        count: 0,\n                        isComplete: false,\n                        id: new Date().toDateString(),\n                      },\n                    ]);\n                  }}\n                />\n              )}\n            </Route>\n            <Route>\n              {(routeProps) => (\n                <section className={styles[\"tasks-container\"]}>\n                  {tasks.map((task, index) => {\n                    return (\n                      <Task\n                        key={task.id}\n                        name={task.name}\n                        iconEnum={task.iconEnum}\n                        count={task.count}\n                        isComplete={task.isComplete}\n                        onClick={() => {\n                          handleTaskClick(task, index);\n                        }}\n                      />\n                    );\n                  })}\n                  <Task\n                    name=\"Add a task\"\n                    icon={plusIcon}\n                    count={null}\n                    isComplete={false}\n                    onClick={() => {\n                      routeProps.history.push(`/add-task`);\n                    }}\n                  />\n                </section>\n              )}\n            </Route>\n          </Switch>\n        </Router>\n      </main>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.scss';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Task_container__58C3r\",\"progress-container\":\"Task_progress-container__1OZwR\",\"icon\":\"Task_icon__3yeRL\",\"count\":\"Task_count__1ok-g\",\"task-name\":\"Task_task-name__XR_ya\",\"task-complete\":\"Task_task-complete__9xsIu\"};"],"sourceRoot":""}